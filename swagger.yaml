host: localhost
info: {description: '', title: InstiApp API, version: ''}
paths:
  /api/bodies:
    get:
      description: Body
      operationId: bodies_list
      parameters: []
      responses:
        '200': {description: ''}
      summary: Body
      tags: [bodies]
    post:
      consumes: [application/json]
      description: 'Create Body.

        Needs the `AddB` Institute Role permission.'
      operationId: bodies_create
      parameters:
      - in: body
        name: data
        schema:
          properties:
            blog_url: {description: '', type: string}
            cover_url: {description: '', type: string}
            description: {description: '', type: string}
            image_url: {description: '', type: string}
            name: {description: '', type: string}
            short_description: {description: '', type: string}
            website_url: {description: '', type: string}
          required: [name]
          type: object
      responses:
        '201': {description: ''}
      summary: Create Body.
      tags: [bodies]
  /api/bodies/{id}:
    delete:
      description: 'Delete Body.

        Needs the `DelB` institute permission.'
      operationId: bodies_delete
      parameters:
      - {description: A UUID string identifying this Body., in: path, name: id, required: true,
        type: string}
      responses:
        '204': {description: ''}
      summary: Delete Body.
      tags: [bodies]
    get:
      description: 'Get Body.

        Retrieve by `uuid` or `str_id`.'
      operationId: bodies_read
      parameters:
      - {description: A UUID string identifying this Body., in: path, name: id, required: true,
        type: string}
      responses:
        '200': {description: ''}
      summary: Get Body.
      tags: [bodies]
    put:
      consumes: [application/json]
      description: 'Update Body.

        Needs the `UpdB` permission.'
      operationId: bodies_update
      parameters:
      - {description: A UUID string identifying this Body., in: path, name: id, required: true,
        type: string}
      - in: body
        name: data
        schema:
          properties:
            blog_url: {description: '', type: string}
            cover_url: {description: '', type: string}
            description: {description: '', type: string}
            image_url: {description: '', type: string}
            name: {description: '', type: string}
            short_description: {description: '', type: string}
            website_url: {description: '', type: string}
          required: [name]
          type: object
      responses:
        '200': {description: ''}
      summary: Update Body.
      tags: [bodies]
  /api/bodies/{id}/follow:
    get:
      description: Follow or unfollow a body {?action}=0,1
      operationId: bodies_follow
      parameters:
      - {description: A UUID string identifying this Body., in: path, name: id, required: true,
        type: string}
      responses:
        '200': {description: ''}
      summary: Follow or unfollow a body {?action}=0,1
      tags: [bodies]
  /api/bodies/{id}/followers:
    get:
      description: List followers of body.
      operationId: bodies_followers_read
      parameters:
      - {description: A UUID string identifying this Body., in: path, name: id, required: true,
        type: string}
      responses:
        '200': {description: ''}
      summary: List followers of body.
      tags: [bodies]
  /api/events:
    get:
      description: 'List Events.

        List fresh events prioritized for the current user.'
      operationId: events_list
      parameters: []
      responses:
        '200': {description: ''}
      summary: List Events.
      tags: [events]
    post:
      consumes: [application/json]
      description: 'Create Event.

        Needs `AddE` permission for each body to be associated.'
      operationId: events_create
      parameters:
      - in: body
        name: data
        schema:
          properties:
            all_day: {description: '', type: boolean}
            bodies_id:
              description: ''
              items: {type: string}
              type: array
            description: {description: '', type: string}
            end_time: {description: '', type: string}
            image_url: {description: '', type: string}
            name: {description: '', type: string}
            notify: {description: '', type: boolean}
            start_time: {description: '', type: string}
            venue_ids:
              description: ''
              items: {type: string}
              type: array
            website_url: {description: '', type: string}
          required: [name, start_time, end_time, bodies_id]
          type: object
      responses:
        '201': {description: ''}
      summary: Create Event.
      tags: [events]
  /api/events/{id}:
    delete:
      description: 'Delete Event.

        Needs `DelE` permission for all associated bodies.'
      operationId: events_delete
      parameters:
      - {description: A UUID string identifying this Event., in: path, name: id, required: true,
        type: string}
      responses:
        '204': {description: ''}
      summary: Delete Event.
      tags: [events]
    get:
      description: 'Get Event.

        Get by `uuid` or `str_id`'
      operationId: events_read
      parameters:
      - {description: A UUID string identifying this Event., in: path, name: id, required: true,
        type: string}
      responses:
        '200': {description: ''}
      summary: Get Event.
      tags: [events]
    put:
      consumes: [application/json]
      description: 'Update Event.

        Needs BodyRole with `UpdE` for at least one associated body.

        Disassociating bodies from the event requires the `DelE`

        permission and associating needs `AddE`'
      operationId: events_update
      parameters:
      - {description: A UUID string identifying this Event., in: path, name: id, required: true,
        type: string}
      - in: body
        name: data
        schema:
          properties:
            all_day: {description: '', type: boolean}
            bodies_id:
              description: ''
              items: {type: string}
              type: array
            description: {description: '', type: string}
            end_time: {description: '', type: string}
            image_url: {description: '', type: string}
            name: {description: '', type: string}
            notify: {description: '', type: boolean}
            start_time: {description: '', type: string}
            venue_ids:
              description: ''
              items: {type: string}
              type: array
            website_url: {description: '', type: string}
          required: [name, start_time, end_time, bodies_id]
          type: object
      responses:
        '200': {description: ''}
      summary: Update Event.
      tags: [events]
  /api/locations:
    get:
      description: List reusable locations.
      operationId: locations_list
      parameters: []
      responses:
        '200': {description: ''}
      summary: List reusable locations.
      tags: [locations]
    post:
      consumes: [application/json]
      description: 'Create a Location.

        Needs ''Location'' institute permission.'
      operationId: locations_create
      parameters:
      - in: body
        name: data
        schema:
          properties:
            description: {description: '', type: string}
            group_id: {description: '', type: integer}
            lat: {description: '', type: number}
            lng: {description: '', type: number}
            name: {description: '', type: string}
            parent: {description: '', type: string}
            parent_relation: {description: '', type: string}
            pixel_x: {description: '', type: integer}
            pixel_y: {description: '', type: integer}
            reusable: {description: '', type: boolean}
            short_name: {description: '', type: string}
          required: [name]
          type: object
      responses:
        '201': {description: ''}
      summary: Create a Location.
      tags: [locations]
  /api/locations/{id}:
    delete:
      description: 'Delete a Location.

        Needs ''Location'' institute permission.'
      operationId: locations_delete
      parameters:
      - {description: A UUID string identifying this Location., in: path, name: id,
        required: true, type: string}
      responses:
        '204': {description: ''}
      summary: Delete a Location.
      tags: [locations]
    get:
      description: Location
      operationId: locations_read
      parameters:
      - {description: A UUID string identifying this Location., in: path, name: id,
        required: true, type: string}
      responses:
        '200': {description: ''}
      summary: Location
      tags: [locations]
    put:
      consumes: [application/json]
      description: 'Update Location.

        This requires the user to have the ''Location'' institute permission

        or BodyRole for the event using the location if the it is not reusable.'
      operationId: locations_update
      parameters:
      - {description: A UUID string identifying this Location., in: path, name: id,
        required: true, type: string}
      - in: body
        name: data
        schema:
          properties:
            description: {description: '', type: string}
            group_id: {description: '', type: integer}
            lat: {description: '', type: number}
            lng: {description: '', type: number}
            name: {description: '', type: string}
            parent: {description: '', type: string}
            parent_relation: {description: '', type: string}
            pixel_x: {description: '', type: integer}
            pixel_y: {description: '', type: integer}
            reusable: {description: '', type: boolean}
            short_name: {description: '', type: string}
          required: [name]
          type: object
      responses:
        '200': {description: ''}
      summary: Update Location.
      tags: [locations]
  /api/login:
    get:
      description: 'Log in.

        Uses the `code` and `redir` query parameters.'
      operationId: login_0
      parameters: []
      responses:
        '200': {description: ''}
      summary: Log in.
  /api/login/get-user:
    get:
      description: Get session and profile.
      operationId: login_get_user
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get session and profile.
      tags: [login]
  /api/logout:
    get:
      description: Log out.
      operationId: logout
      parameters: []
      responses:
        '200': {description: ''}
      summary: Log out.
  /api/mess:
    get:
      description: Get mess menus of all hostels.
      operationId: mess_list
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get mess menus of all hostels.
      tags: [mess]
  /api/news:
    get:
      description: Get News feed.
      operationId: news_feed
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get News feed.
  /api/notifications:
    get:
      description: Get unread notifications for current user.
      operationId: get_notifications
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get unread notifications for current user.
  /api/notifications/read:
    get:
      description: Mark all notifications as read.
      operationId: notifications_mark_all_notifications_read
      parameters: []
      responses:
        '200': {description: ''}
      summary: Mark all notifications as read.
      tags: [notifications]
  /api/notifications/read/{id}:
    get:
      description: Mark one notification as read.
      operationId: notifications_mark_notification_read
      parameters:
      - {description: '', in: path, name: id, required: true, type: string}
      responses:
        '200': {description: ''}
      summary: Mark one notification as read.
      tags: [notifications]
  /api/pass-login:
    get:
      description: 'DANGEROUS: Password Log in.

        Uses the `username` and `password` query parameters.'
      operationId: pass_login
      parameters: []
      responses:
        '200': {description: ''}
      summary: 'DANGEROUS: Password Log in.'
  /api/placement-blog:
    get:
      description: Get Placement Blog.
      operationId: placement_blog
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get Placement Blog.
  /api/roles:
    post:
      consumes: [application/json]
      description: Body Role
      operationId: roles_create
      parameters:
      - in: body
        name: data
        schema:
          properties:
            body: {description: '', type: string}
            inheritable: {description: '', type: boolean}
            name: {description: '', type: string}
            permissions:
              description: ''
              items: {type: string}
              type: array
            priority: {description: '', type: integer}
            users:
              description: ''
              items: {type: string}
              type: array
          required: [name, body, permissions, users]
          type: object
      responses:
        '201': {description: ''}
      summary: Body Role
      tags: [roles]
  /api/roles/{id}:
    delete:
      description: Body Role
      operationId: roles_delete
      parameters:
      - {description: A UUID string identifying this Body Role., in: path, name: id,
        required: true, type: string}
      responses:
        '204': {description: ''}
      summary: Body Role
      tags: [roles]
    get:
      description: Body Role
      operationId: roles_read
      parameters:
      - {description: A UUID string identifying this Body Role., in: path, name: id,
        required: true, type: string}
      responses:
        '200': {description: ''}
      summary: Body Role
      tags: [roles]
    put:
      consumes: [application/json]
      description: Body Role
      operationId: roles_update
      parameters:
      - {description: A UUID string identifying this Body Role., in: path, name: id,
        required: true, type: string}
      - in: body
        name: data
        schema:
          properties:
            body: {description: '', type: string}
            inheritable: {description: '', type: boolean}
            name: {description: '', type: string}
            permissions:
              description: ''
              items: {type: string}
              type: array
            priority: {description: '', type: integer}
            users:
              description: ''
              items: {type: string}
              type: array
          required: [name, body, permissions, users]
          type: object
      responses:
        '200': {description: ''}
      summary: Body Role
      tags: [roles]
  /api/search:
    get:
      description: 'EXPENSIVE: Search with query param `query` throughout the database.'
      operationId: search
      parameters: []
      responses:
        '200': {description: ''}
      summary: 'EXPENSIVE: Search with query param `query` throughout the database.'
  /api/training-blog:
    get:
      description: Get Training Blog.
      operationId: training_blog
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get Training Blog.
  /api/upload:
    post:
      consumes: [application/json]
      description: Upload file.
      operationId: upload_create
      parameters:
      - in: body
        name: data
        schema:
          properties:
            picture: {description: '', type: string}
          required: [picture]
          type: object
      responses:
        '201': {description: ''}
      summary: Upload file.
      tags: [upload]
  /api/upload/{id}:
    delete:
      description: Delete file entry.
      operationId: upload_delete
      parameters:
      - {description: A UUID string identifying this Uploaded Image., in: path, name: id,
        required: true, type: string}
      responses:
        '204': {description: ''}
      summary: Delete file entry.
      tags: [upload]
    get:
      description: Upload
      operationId: upload_read
      parameters:
      - {description: A UUID string identifying this Uploaded Image., in: path, name: id,
        required: true, type: string}
      responses:
        '200': {description: ''}
      summary: Upload
      tags: [upload]
  /api/user-me:
    get:
      description: Get current user.
      operationId: user-me_read
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get current user.
      tags: [user-me]
    patch:
      consumes: [application/json]
      description: Update current user.
      operationId: user-me_partial_update
      parameters:
      - in: body
        name: data
        schema:
          properties:
            about: {description: '', type: string}
            android_version: {description: '', type: integer}
            fcm_id: {description: '', type: string}
            hostel: {description: '', type: string}
            ldap_id: {description: '', type: string}
            name: {description: '', type: string}
            profile_pic: {description: '', type: string}
            roll_no: {description: '', type: string}
            website_url: {description: '', type: string}
          type: object
      responses:
        '200': {description: ''}
      summary: Update current user.
      tags: [user-me]
    put:
      consumes: [application/json]
      description: Update current user.
      operationId: user-me_update
      parameters:
      - in: body
        name: data
        schema:
          properties:
            about: {description: '', type: string}
            android_version: {description: '', type: integer}
            fcm_id: {description: '', type: string}
            hostel: {description: '', type: string}
            ldap_id: {description: '', type: string}
            name: {description: '', type: string}
            profile_pic: {description: '', type: string}
            roll_no: {description: '', type: string}
            website_url: {description: '', type: string}
          type: object
      responses:
        '200': {description: ''}
      summary: Update current user.
      tags: [user-me]
  /api/user-me/events:
    get:
      description: Current user's created events.
      operationId: user-me_get_my_events
      parameters: []
      responses:
        '200': {description: ''}
      summary: Current user's created events.
      tags: [user-me]
  /api/user-me/roles:
    get:
      description: Get roles with nested events.
      operationId: user-me_get_my_roles
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get roles with nested events.
      tags: [user-me]
  /api/user-me/subscribe-wp:
    post:
      consumes: [application/json]
      description: Subscribe to web push.
      operationId: user-me_subscribe_web_push
      parameters:
      - in: body
        name: data
        schema:
          properties:
            about: {description: '', type: string}
            android_version: {description: '', type: integer}
            fcm_id: {description: '', type: string}
            hostel: {description: '', type: string}
            ldap_id: {description: '', type: string}
            name: {description: '', type: string}
            profile_pic: {description: '', type: string}
            roll_no: {description: '', type: string}
            website_url: {description: '', type: string}
          type: object
      responses:
        '201': {description: ''}
      summary: Subscribe to web push.
      tags: [user-me]
  /api/user-me/ues/{event_pk}:
    get:
      description: 'Set UES for current user.

        This will create or update if record exists.'
      operationId: user-me_set_ues_me
      parameters:
      - {description: '', in: path, name: event_pk, required: true, type: string}
      responses:
        '200': {description: ''}
      summary: Set UES for current user.
      tags: [user-me]
  /api/user-me/unr/{news_pk}:
    get:
      description: 'Set UNR(User News Reaction) for current user.

        This will create or update if record exists.'
      operationId: user-me_set_unr_me
      parameters:
      - {description: '', in: path, name: news_pk, required: true, type: string}
      responses:
        '200': {description: ''}
      summary: Set UNR(User News Reaction) for current user.
      tags: [user-me]
  /api/users/{id}:
    get:
      description: UserProfile
      operationId: users_read
      parameters:
      - {description: A UUID string identifying this Profile., in: path, name: id,
        required: true, type: string}
      responses:
        '200': {description: ''}
      summary: UserProfile
      tags: [users]
  /api/venter/comments/{id}:
    delete:
      description: Delete a comment by the current user.
      operationId: venter_comments_delete
      parameters:
      - {description: A UUID string identifying this Comment., in: path, name: id,
        required: true, type: string}
      responses:
        '204': {description: ''}
      summary: Delete a comment by the current user.
      tags: [venter]
    get:
      description: Get a single comment.
      operationId: venter_comments_read
      parameters:
      - {description: A UUID string identifying this Comment., in: path, name: id,
        required: true, type: string}
      responses:
        '200': {description: ''}
      summary: Get a single comment.
      tags: [venter]
    put:
      consumes: [application/json]
      description: Update a comment if created by current user.
      operationId: venter_comments_update
      parameters:
      - {description: A UUID string identifying this Comment., in: path, name: id,
        required: true, type: string}
      - in: body
        name: data
        schema:
          properties:
            text: {description: '', type: string}
          required: [text]
          type: object
      responses:
        '200': {description: ''}
      summary: Update a comment if created by current user.
      tags: [venter]
  /api/venter/complaints:
    get:
      description: 'Get a list of non-deleted complaints.

        To filter by current user, add a query parameter {?filter}'
      operationId: venter_complaints_list
      parameters: []
      responses:
        '200': {description: ''}
      summary: Get a list of non-deleted complaints.
      tags: [venter]
    post:
      consumes: [application/json]
      operationId: venter_complaints_create
      parameters:
      - in: body
        name: data
        schema:
          properties:
            description: {description: '', type: string}
            latitude: {description: '', type: number}
            location_description: {description: '', type: string}
            longitude: {description: '', type: number}
          type: object
      responses:
        '201': {description: ''}
      tags: [venter]
  /api/venter/complaints/{id}:
    get:
      operationId: venter_complaints_read
      parameters:
      - {description: A UUID string identifying this Complaint., in: path, name: id,
        required: true, type: string}
      responses:
        '200': {description: ''}
      tags: [venter]
    put:
      consumes: [application/json]
      operationId: venter_complaints_update
      parameters:
      - {description: A UUID string identifying this Complaint., in: path, name: id,
        required: true, type: string}
      - in: body
        name: data
        schema:
          properties:
            description: {description: '', type: string}
            latitude: {description: '', type: number}
            location_description: {description: '', type: string}
            longitude: {description: '', type: number}
          type: object
      responses:
        '200': {description: ''}
      tags: [venter]
  /api/venter/complaints/{id}/comments:
    post:
      consumes: [application/json]
      operationId: venter_complaints_comments_create
      parameters:
      - {description: A UUID string identifying this Comment., in: path, name: id,
        required: true, type: string}
      - in: body
        name: data
        schema:
          properties:
            text: {description: '', type: string}
          required: [text]
          type: object
      responses:
        '201': {description: ''}
      tags: [venter]
schemes: [http]
securityDefinitions:
  basic: {type: basic}
swagger: '2.0'
